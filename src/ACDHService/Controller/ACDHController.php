<?php

namespace Islandora\PDX\ACDHService\Controller;

use Silex\Application;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Islandora\Chullo\Chullo;

class ACDHController {

    public function __construct(Application $app) {
        
    }

    /**
     * Returns request resource metadata as a PHP array.
     * 
     * Later on it should support all required input formats (e.g. hal_json
     * generated by Drupal) but at the moment it simply returns all not empty
     * POST parameters.
     * 
     * @param \Symfony\Component\HttpFoundation\Request $request Symfony's request object
     * 
     * @return array
     */
    private function getRequestMetadata(Request $request) {
        $skip = array('MAX_FILE_SIZE');
        
        $metadata = array();
        foreach ($request->request->all() as $key => $value) {
            if (!empty($value) && !in_array($key, $skip)) {
                $metadata[$key] = $value;
            }
        }
        return $metadata;
    }

    /**
     * Returns information on request resource itself like the path in the
     * local filesystem, original name and MIME type
     * 
     * Later on it should support all required input formats (e.g. hal_json
     * generated by Drupal) but at the moment it assumes data are uploaded
     * as the "file" field of the multipart/form-data POST form.
     * 
     * @param \Symfony\Component\HttpFoundation\Request $request Symfony's request object
     * 
     * @return arrray
     */
    private function getRequestFile(Request $request) {
        $file = $request->files->get('file');
        if (empty($file)) {
            throw new \RuntimeException('No file provided or file upload failed.');
        }
        return array(
            'path' => $file->getPathName(),
            'name' => $file->getFileName(),
            'mime' => $file->getClientMimeType()
        );
    }

    /**
     * Fetches class definitions from the repository
     * 
     * Here and now hardcoded as there are not available in the repository
     * 
     * @return array
     */
    private function getClassDefs() {
        return array(
            'TEI' => array("prop1", "prop2", "prop3"),
            'Collection' => array("prop1", "prop2"),
            'Other' => array("prop1", "prop4")
        );
    }

    /**
     * Returns array of classes matched by a given set of metadata
     * 
     * @param array $metadata metadata with property names as array keys and their values as array values
     * 
     * @return array
     */
    private function getMatchingClasses($metadata) {
        /* Symphony replace the . to _  in input data names */
        $matching = array();
        $classes = $this->getClassDefs();
        foreach ($classes as $class => $properties) {
            array_walk($properties, function(&$item, $key) {
                $item = str_replace('.', '_', $item);
            });
            $missing = array_diff($properties, array_keys($metadata));
            if (empty($missing)) {
                $matching[] = $class;
            }
        }
        return $matching;
    }

    public function post(Application $app, Request $request) {
        $file = $this->getRequestFile($request);

        $metadata = $this->getRequestMetadata($request);
        $classes = $this->getMatchingClasses($metadata);
        if (empty($classes)) {
            return Response::create('Metadata does not match any class definition', 400, array());
        }

        $cfg = $app['config']['islandora'];
        $chullo = Chullo::create($cfg['fedoraProtocol'] . '://' . $cfg['fedoraHost'] . $cfg['fedoraPath']);
        $transaction = $chullo->createTransaction();

        $uri = $chullo->createResource(
            '', file_get_contents($file['path']), array('Content-Type' => $file['mime']), $transaction
        );
        if($uri === false){
            throw new \RuntimeException('Resource was not created');
        }

        $rdf = new \EasyRdf_Graph();
        foreach ($metadata as $key => $value) {
            if (preg_match('|^http[s]://|', $value)) {
                $rdf->addResource($uri, $key, $value);
            }else{
                $rdf->add($uri, $key, $value);
            }
        }
        foreach ($classes as $class) {
            $rdf->addResource($uri, 'a', $class);
        }
        $sparql = 'INSERT {' . $rdf->serialise('ntriples') . '} WHERE {}';
        
        $result = $chullo->modifyResource($uri . '/fcr:metadata', $sparql, array(), $transaction);
        if($result === false){
            throw new \RuntimeException('metadata update failed');
        }

        $chullo->commitTransaction($transaction);
        $uri = str_replace('/' . $transaction, '', $uri);
        return Response::create('', 201, array('Location' => $uri));
    }

    public function getCollection(Application $app, Request $request) {
        $f = fopen('/tmp/dump', 'w');
        fwrite($f, "### GET\n");
        foreach($_GET as $k=>$v){
            fwrite($f, $k . ' => ' . $v . "\n");
        }
        fwrite($f, "### POST\n");
        foreach($_POST as $k=>$v){
            fwrite($f, $k . ' => ' . $v . "\n");
        }
        fwrite($f, "### SERVER\n");
        foreach($_SERVER as $k=>$v){
            fwrite($f, $k . ' => ' . $v . "\n");
        }
        fclose($f);
    }
}
